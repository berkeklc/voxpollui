import 'package:flutter/material.dart';
import 'package:parse_server_sdk_flutter/parse_server_sdk_flutter.dart';
import 'package:voxpollui/boarding/boarding_bes.dart';
import 'package:voxpollui/home_page.dart';
import 'package:voxpollui/interestpage.dart';

// Generated by: https://www.figma.com/community/plugin/842128343887142055/

class BoardinDort extends StatefulWidget {

  BoardinDort({Key? key}) : super(key: key);

  @override
  _StateBoardinDort createState() => _StateBoardinDort();
}

class _StateBoardinDort extends State<BoardinDort> {
  int currentStep = 0; // Mevcut adımı takip etmek için
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _surnameController = TextEditingController();
  final TextEditingController _usernameController = TextEditingController();
  final TextEditingController _mailController = TextEditingController();
  final TextEditingController _birthDateController = TextEditingController();
  final TextEditingController _cityController = TextEditingController();
  final TextEditingController _districtController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  final TextEditingController _biographyController = TextEditingController();
  List<String> selectedInterests = [];
  List<String> interestsList = []; // Veritabanından çekilecek ilgi alanları listesi
  String _gender = 'Erkek';  // Varsayılan cinsiyet

  Future<void> _fetchInterests() async {
    final ParseResponse response = await ParseObject('Interest').getAll();
    if (response.success && response.results != null) {
      setState(() {
        // List<dynamic> türündeki değeri List<String> türüne dönüştürme
        interestsList = response.results!.map((e) => e.get<String>('name') as String).toList();
      });
    } else {
      // Hata durumunda işlem
    }
  }
  @override
  void initState() {
    super.initState();
    _fetchInterests();
  }

  void _toggleInterest(String interest) {
    setState(() {
      if (selectedInterests.contains(interest)) {
        selectedInterests.remove(interest);
      } else {
        if (selectedInterests.length < 5) {
          selectedInterests.add(interest);
        } else {
          // Kullanıcıya en fazla 5 ilgi alanı seçebileceğini bildir
        }
      }
    });
  }

  Future<void> _registerUser() async {
    final username = _usernameController.text.trim();
    final email = _mailController.text.trim();
    final password = _passwordController.text.trim();

    // Kişisel bilgileri ve ilgi alanlarını al
    final name = _nameController.text.trim();
    final surname = _surnameController.text.trim();

    // Kişisel bilgileri al
    final birthDate = _birthDateController.text.trim();
    final city = _cityController.text.trim();
    final district = _districtController.text.trim();
    final biography = _biographyController.text.trim();

    if (username.isEmpty || email.isEmpty || password.isEmpty || name.isEmpty || surname.isEmpty || birthDate.isEmpty || city.isEmpty || district.isEmpty || selectedInterests.isEmpty) {
      // Kullanıcı bilgileri eksik
      return;
    }
    

    final user = ParseUser.createUser(username, password, email)
      ..set('name', name)
      ..set('surname', surname)
      ..set('birthDate', birthDate)
      ..set('city', city)
      ..set('district', district)
      ..set('gender', _gender)
      ..set('interests', selectedInterests) // İlgi alanlarını kullanıcıya ekle
      ..set('biography', biography ?? '');

    var response = await user.signUp();

    if (response.success) {
      // Kayıt başarılı, oturum aç ve Ana Sayfaya yönlendir
      await ParseUser(username, password, email).login();
      Navigator.pushAndRemoveUntil(
        context,
        MaterialPageRoute(builder: (context) => HomePage()),
            (Route<dynamic> route) => false,
      );
    } else {
      // Kayıt başarısız, hata mesajını göster
      _showErrorDialog(response.error?.message ?? 'Bir hata oluştu');
    }
  }

  void _goToNextStep() {
    if (currentStep < 2) {
      setState(() {
        currentStep++;
      });
    } else {
      _registerUser();
    }
  }

  @override
  Widget build(BuildContext context) {

  return Scaffold(
  body: Padding(
    padding: EdgeInsets.all(16.0),
    child: Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: <Widget>[
        SizedBox(height: 50,),
        Text(
          'Kişisel Bilgiler',
          style: TextStyle(
          color: Color(0xFF0C0C0C),
          fontSize: 40,
          fontFamily: 'Gilroy',
          fontWeight: FontWeight.w600,
          height: 0,
          ),
        ),
        SizedBox(height: 20,),
        Text(
          '*Bazı bilgiler sonradan değiştirilemez. Doğru girdiğinizden emin olun.',
          style: TextStyle(
            color: Colors.black,
            fontSize: 14,
          ),
        ),
        SizedBox(height: 16),
        TextField(
          controller: _nameController,
          decoration: InputDecoration(
            labelText: 'İsim',
            border: UnderlineInputBorder(),
          ),
        ),
        TextField(
          controller: _surnameController,
          decoration: InputDecoration(
            labelText: 'Soyisim',
            border: UnderlineInputBorder(),
          ),
        ),
        TextField(
          controller: _usernameController,
          decoration: InputDecoration(
            labelText: 'Kullanıcı Adı',
            border: UnderlineInputBorder(),
          ),
        ),
        TextField(
          controller: _mailController,
          decoration: InputDecoration(
            labelText: 'E-Mail',
            border: UnderlineInputBorder(),
          ),
        ),
        TextField(
          controller: _birthDateController,
          decoration: InputDecoration(
            labelText: 'Doğum Tarihi',
            border: UnderlineInputBorder(),
          ),
        ),
        TextField(
          controller: _cityController,
          decoration: InputDecoration(
            labelText: 'İl',
            border: UnderlineInputBorder(),
          ),
        ),
        TextField(
          controller: _districtController,
          decoration: InputDecoration(
            labelText: 'İlçe',
            border: UnderlineInputBorder(),
          ),
        ),
        DropdownButton<String>(
              value: _gender,
              onChanged: (String? newValue) {
                setState(() {
                  _gender = newValue!;
                });
              },//@
              items: <String>['Erkek', 'Kadın', 'Diğer']
                  .map<DropdownMenuItem<String>>((String value) {
                return DropdownMenuItem<String>(
                  value: value,
                  child: Text(value),
                );
              }).toList(),
            ),
        SizedBox(height: 16),
        GestureDetector(
          onTap: _registerUser,
          child: Container(
            alignment: Alignment.bottomCenter,
            width: double.infinity,
            height: 49,
            margin: EdgeInsets.all(31), // Burası ekranın kenar boşluklarını ayarlar
            decoration: ShapeDecoration(
              color: Color(0xFF2355FF),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(5),
              ),
            ),
            child: Center(
              child: Text(
                'İleri',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 16,
                  fontFamily: 'Gilroy',
                  fontWeight: FontWeight.w700,
                ),
              ),
            ),
          ),
        ),
      ],
    ),
  ),
);
  }
  void _showErrorDialog(String message) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Kayıt Başarısız'),
          content: Text(message),
          actions: <Widget>[
            TextButton(
              child: Text('Tamam'),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
          ],
        );
      },
    );
  }
}